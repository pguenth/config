# XONSH WEBCONFIG START
$PROMPT = '{env_name}{BOLD_GREEN}{user}@{hostname}{BOLD_BLUE} {cwd}{branch_color}{gitstatus: {}}{RESET} {BOLD_BLUE}{prompt_end}{RESET} '
$XONSH_COLOR_STYLE = 'native'
# XONSH WEBCONFIG END

#if $TILIX_ID or $VTE_VERSION:
#    source-bash /etc/profile.d/vte.sh

# map caps to escape for vim
# now done in xinitrc/xsession
# setxkbmap -option caps:escape
from math import *
import numpy as np

xontrib load abbrevs
xontrib load whole_word_jumping
xontrib load hist_navigator
xontrib load fzf-widgets

$fzf_history_binding = "c-l"  # Ctrl+R
$fzf_ssh_binding = "c-s"      # Ctrl+S
$fzf_file_binding = "c-j"      # Ctrl+T
$fzf_dir_binding = "c-k"      # Ctrl+G
$fzf_find_command = "fd"
$fzf_find_dirs_command = "fd -t d"

def _ranger_cd(path=None):
    temp_file = $(mktemp -t "ranger_cd.XXXXXXXX").strip()
    path = path if not path is None else $PWD
    ranger --choosedir=@(temp_file) -- @(path)
    chosen_dir = $(cat -- @(temp_file))
    if not chosen_dir == "" and chosen_dir != $PWD:
        cd @(chosen_dir)
    rm -f -- @(temp_file)

def _treetasks_safe():
    cp /home/patrick/.treetasks.xml /home/patrick/.treetasks.xml.backup
    python /home/patrick/treetasks/treetasks.py

def _type_follow_link(path):
    ftype = $(stat -c '%F' @(path))
    if ftype == 'symbolic link\n':
        return _type_follow_link($(readlink @(path)).splitlines()[0])
    else:
        return ftype

def _unified_cat_single(path=None):
    if path is None:
        return

    ftype = _type_follow_link(path)
    if ftype == 'directory\n':
        width = int($(stty size).split()[1])
        spacer = 'â”€'
        title = spacer * 3 + ' ls -la ' + path + ' '
        print(title + spacer * (width - len(title)))
        ls -la @(path)
        print(spacer * width)
    else:
        bat @(path)

def _unified_cat(paths):
    if len(paths) == 0:
        _unified_cat_single(".")

    for p in paths:
        _unified_cat_single(p)

def _print_help():
    print("Keybindings:")
    print("    C-J      Fuzzy-search files")
    print("    C-K      Fuzzy-search directories")
    print("    C-L      Fuzzy-search history")
    print("    C-S      Fuzzy-search ssh hosts")
    print("    A-Up     cd ..")
    print("    A-Left   Directory history backward")
    print("    A-Right  Directory history forward")
    print("    S-DEL    Delete one word")
    print("")
    print("Useful aliases:")
    print("    r     ranger with cd-functionality")
    print("    uc    unified cat: uses 'ls -la' or 'bat' depending on file type")
    print("    h     show this help")
    print("    tt    open treetasks after backing the old .treetasks.xml file up")
    print("    For more aliases look into ~/.xonshrc file")
    print("")
    print("Abbreviations:")
    print("    Use the dict 'abbrevs' to add abbreviations which are automatically expanded.")
    

aliases['h'] = _print_help
aliases['r'] = _ranger_cd
aliases['uc'] = _unified_cat
aliases['tudu'] = 'xonsh ~/tudu-wrapper.xsh'
aliases['tt'] = _treetasks_safe
aliases['sharevnc2'] = 'bash -c "export DISPLAY=:0; x0vncserver -rfbauth ~/.vnc/passwd -rfbport 5902"'
aliases['sharevnc'] = 'x11vnc -display :0'
aliases['setfbres'] = lambda args: $(xrandr --fb @(str(args[0]) + 'x' + str(args[1])))
aliases['sshkeycheck'] = lambda args: $(cat @($HOME + "/.ssh/known_hosts") | grep @(args[0]) | ssh-keygen -lf -)
aliases['sshkeyshow'] = lambda args: $(ssh -o VisualHostKey=yes -fN @(args[0]))
aliases['lsb'] = lambda args: $(echo @(args[0]) > /sys/class/backlight/intel_backlight/brightness)
